<?php
/**
 * Created by PhpStorm.
 * User: miskolczicsego
 * Date: 2017.03.26.
 * Time: 19:06
 */

namespace DogFeeder\ScheduleBundle\Command;


use DogFeeder\FeederBundle\Entity\FeedHistory;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Validator\Constraints\Date;

class FeedCheckCommand extends ContainerAwareCommand
{
    protected function configure()
    {
//        parent::configure(); // TODO: Change the autogenerated stub
        $this
            ->setName('feed:check')
            ->setDescription('Check which scheduled feeds are ready to execute');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
//        parent::execute($input, $output); // TODO: Change the autogenerated stub
        $em = $this->getContainer()->get('doctrine')->getManager();

        $schedule = $em->getRepository('ScheduleBundle:Schedule')->getFirstScheduleByDate()[0];

        $hour = date("G");

        if( $schedule['feed_hour_1'] == $hour ||
            $schedule['feed_hour_2'] == $hour ||
            $schedule['feed_hour_3'] == $hour ||
            $schedule['feed_hour_4'] == $hour ||
            $schedule['feed_hour_5'] == $hour) {


        }
        $this->feed();
        $output->write('faszom');
    }

    public function feed()
    {

//        $feeder = $this->getContainer()->get('doctrine')->getRepository('FeederBundle:Feeder')->find($this->formData['feeder']);


        $output = array();
        exec("/var/www/html/DFProject/src/DogFeeder/FeederBundle/Resources/files/feed.py", $output);
        $messages = implode(', ', $output);


        $stat = new FeedHistory();
        $em = $this->getContainer()->get('doctrine')->getManager();

        $stat->setQuantity($messages == 'Successful feed' ? 300 : 0);
        //TODO: itt a visszatérő angol üzeneteket magyarra kéne fordítani
        $stat->setDescription($messages);
//        $stat->setFeeder($feeder);
        $em->persist($stat);

        $em->flush();
    }
}